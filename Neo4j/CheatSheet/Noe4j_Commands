//Examine the data model: nodes and relationship
    CALL db.schema.visualization()

//Examine properties keys for the graph
    CALL db.propertyKeys()

//MATCH
    MATCH (variable:Label)
    RETURN variable

################################
# INTRODUCTION TO CYPHER
################################

// Remove everything from a database
 MATCH (n) DETACH DELETE n

    // Another way is
    CREATE OR REPLACE DATABASE <database-name>

// List EXISTING DATABASES
:dbs

// Create a database
CREATE DATABASE Movies

// Switch to this database
:use movies

//Filter property

    MATCH (variable:Label {propertyKey: propertyValue, propertyKey2: propertyValue2})
    RETURN variable

    MATCH (m:Movie {released: 2003, tagline: 'Free your mind'})
    RETURN m

//Return property values
    MATCH (variable:Label {prop1: value, prop2: value})
    RETURN variable.prop3, variable.prop4

    //Alias for column headers when returning properties
    MATCH (variable:Label {propertyKey1: propertyValue1})
    RETURN variable.propertyKey2 AS alias2

    // Using back tick `` to store names of variables with blank spaces
    MATCH (p:Person {born: 1965})
    RETURN p.name AS name, p.born AS `birth year`

//Relationships

    MATCH (node1)-[:REL_TYPE]->(node2)
    RETURN node1, node2

    MATCH (node1)-[:REL_TYPEA | REL_TYPEB]->(node2)
    RETURN node1, node2

    MATCH (p:Person)-[rel:ACTED_IN]->(m:Movie {title: 'The Matrix'})
    RETURN p, rel, m

    MATCH (p:Person {name: 'Tom Hanks'})-[:ACTED_IN|DIRECTED]->(m:Movie)
    RETURN p.name, m.title

    //Anonymous relationships
    MATCH (p:Person)-->(m:Movie {title: 'The Matrix'})
    RETURN p, m

    MATCH (p:Person)-[]-(m:Movie {title: 'The Matrix'})
    RETURN p, m

    // TYPE of RELATIONSHIP
    MATCH (p:Person)-[rel]->(:Movie {title:'The Matrix'})
    RETURN p.name, type(rel)

    //Properties of relationship
    MATCH (p:Person)-[:REVIEWED {rating: 65}]->(:Movie {title: 'The Da Vinci Code'})
    RETURN p.name

    //Traversing multiple relationships
    MATCH  (p:Person)-[:FOLLOWS]->(:Person)-[:FOLLOWS]->(:Person {name:'Jessica Thompson'})
    RETURN p

// Paths
    MATCH  path = (:Person)-[:FOLLOWS]->(:Person)-[:FOLLOWS]->(:Person {name:'Jessica Thompson'})
    RETURN  path

// Best practices
    - Node labels are CamelCase and begin with an upper-case letter (CASE SENSITIVE)
    - Property keys, variables, parameters, aliases, and functions are camelCase and begin with a lower-case letter (CASE SENSITIVE)
    - Relationship types are in upper-case and can use the underscore (don't use -)
    - Cypher keywords are upper-case (examples: MATCH, RETURN). Note that Cypher keywords are case-insensitive, but a best practice is to use upper-case.
    - String constants are in single quotes, unless the string contains a quote or apostrophe (examples: ‘The Matrix’, “Something’s Gotta Give”)
    - Place named nodes and relationships (that use variables) before anonymous nodes and relationships in your MATCH clauses when possible.
    - Specify anonymous relationships with -->, --, or <--.

################################
# WHERE FILTERING
################################

// Simple Where
    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
    WHERE m.released = 2008 OR m.released = 2009
    RETURN p, m

// Ranges
    WHERE 2003 <= m.released <= 2004

// Boolean operators
    AND, OR, XOR, and NOT.

// IN
    2 IN [1, 2, 3]
    WHERE other.name IN ['Andy', 'Peter'] AND

// CHECK Existence of property
    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
    WHERE p.name='Jack Nicholson' AND exists(m.tagline)
    RETURN m.title, m.tagline

    // Existence of a relationship: exclude it
    WHERE NOT exists( (p)-[:DIRECTED]->(m) )
    WHERE NOT ((a)-[:DIRECTED]->(:Movie))

// Testing Strings
    STARTS WITH: perform case-sensitive prefix searching on strings
    ENDS WITH: perform case-sensitive suffix searching on strings
    CONTAINS: perform case-sensitive inclusion searching in strings


// String functions (p. 161)
    toLower(p.name)
    toString()
    toUpper()
    left(), lTrim(), replace(), reverse(), split()

// Regular expressions: =~
    MATCH (p:Person)
    WHERE p.name =~'Tom.*'
    RETURN p.name

    Case insensitive: (?i)

################################
# PATTERNS
################################
//Two patterns in a MATCH: Multiple Match (separated by comma)
    MATCH (a:Person)-[:ACTED_IN]->(m:Movie),
          (m)<-[:DIRECTED]-(d:Person)
    WHERE m.released = 2000
    RETURN a.name, m.title, d.name

// Traversal with patterns: Consecutive matchs
    When multiple patterns are specified in a MATCH clause,
    no relationship is traversed more than one time.

    // This will return the Val Kilmer as actor.node
    Here, in this query, the ACTED_IN relation to Val Kilmer is traversed twice:
    MATCH (valKilmer:Person)-[:ACTED_IN]->(m:Movie) //first traversion
    MATCH (actor:Person)-[:ACTED_IN]->(m) //second traversion
    WHERE valKilmer.name = 'Val Kilmer'
    RETURN m.title as movie , actor.name

    // This will NOT return the Val Kilmer as actor.node
    MATCH   (valKilmer:Person)-[:ACTED_IN]->(m:Movie),
            (actor:Person)-[:ACTED_IN]->(m)
    WHERE valKilmer.name = 'Val Kilmer'
    RETURN m.title as movie , actor.name

//Varying lengths path

    // Hops in the path (traversing multiple relationships sequentially)
    //retrieve person that are 2 hops away from a follower
    MATCH (follower:Person)-[:FOLLOWS*2]->(p:Person)
    WHERE follower.name = 'Paul Blythe'
    RETURN p.name

    // All the paths
    (nodeA)-[:RELTYPE*]-(nodeB)

    //Paths with length 1 2 or 3
    (node1)-[:RELTYPE*1..3]->(node2)

    //Shortest path - Assign a variable
    // with any relationship
    MATCH p = shortestPath((m1:Movie)-[*]-(m2:Movie))
    WHERE m1.title = 'A Few Good Men' AND
          m2.title = 'The Matrix'
    RETURN  p

// Returning subraph
    A subgraph is a set of paths derived from your MATCH clause

    MATCH paths = (m:Movie)-[rel]-(p:Person)
    WHERE m.title = 'The Replacements'
    RETURN paths

// OPTIONAL MATCH: using nulls for missing parts of the pattern
// is like the OUTER JOIN in SQL
    MATCH (p:Person)
    WHERE p.name STARTS WITH 'James'
    OPTIONAL MATCH (p)-[r:REVIEWED]->(m:Movie)
    RETURN p.name, type(r), m.title

    // for those rows that do not have the REVIEW relationship (r),
    // the column type(r) appears as null


################################################
# CYPHER DATA: Agg, lists, count, maps, dates
################################################

# Grouping when giving results
    - Done with the node type which has less number of nodes.

# COUNT
    - Count: nodes, relationships, paths, rows

    MATCH (a:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Person)
    RETURN a.name, d.name, count(m)
    // a.name and d.name become the grouping keys

    // COUNT(*): counts the number of rows retrieved

# COLLECT
    - Aggregate value into a list

    // STRING
    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
    WHERE p.name ='Tom Cruise'
    RETURN collect(m.title) AS `movies for Tom Cruise`
    // the result is a list ["Jerry", Gun", "Avatar"]


    //NODE: use it for a next subquery
    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
    WHERE p.name ='Tom Cruise'
    RETURN collect(m) AS `movies for Tom Cruise`

# SIZE: number of elements in a list

    MATCH (actor:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(director:Person)
    RETURN actor.name, director.name, size(collect(m)) AS collaborations,
           collect(m.title) AS movies


# LISTS

    // Return a list of actors names for each title
    MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
    RETURN m.title, collect(a.name) as cast, size(collect(a.name)) as castSize
    // The Matrix     ["Manu", "Emil", "Elrond"]

    // Indexing
    MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
    RETURN m.title, collect(a.name)[0] as `A cast member`,
       size(collect(a.name)) as castSize
    // The Matrix     ["Manu"]

# MAPS

    // Example:
    RETURN {Jan: 31, Feb: 28, Mar: 31, Apr: 30 , May: 31, Jun: 30 ,
       Jul: 31, Aug: 31, Sep: 30, Oct: 31, Nov: 30, Dec: 31}['Feb'] AS DaysInFeb

    // Return a specific set of properties for a node: Map projections
    MATCH (m:Movie)
    WHERE m.title CONTAINS 'Matrix'
    RETURN m { .title, .released } AS movie

# DATES

    // Return as date
    RETURN date(), datetime(), time(), timestamp()

    // Day hour, minute
    RETURN date().day, date().year, datetime().year, datetime().hour,
       datetime().minute

    // Timestamps
    datetime().epochmillis = timestamp()
    RETURN datetime({epochmillis:timestamp()}).day,
       datetime({epochmillis:timestamp()}).year,
       datetime({epochmillis:timestamp()}).month

################################################
# CONTROL THE QUERY (chaining): WITH, UNWIND, CALL
################################################

# WITH

// To avoid doing a subquery for filtering result of a aggregation
    MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
    WITH  a, count(a) AS numMovies, collect(m.title) as movies
    WHERE 1 < numMovies < 4
    RETURN a.name, numMovies, movies

    // since m does not appear in the WITH, it won't be available for the other part
    // of the query

    // always put an ALIAS in all the expressions in the WITH

# UNWIND: to return as rows a collection

    // Is like melting the list into multiple rows
    MATCH (m:Movie)<-[:ACTED_IN]-(p:Person)
    WITH collect(p) AS actors,
    count(p) AS actorCount, m
    UNWIND actors AS actor
    RETURN m.title, actorCount, actor.name

# WITH: subquery

    // Collect the results from the subquery
    MATCH (m:Movie)<-[rv:REVIEWED]-(r:Person)
    WITH m, rv, r
    MATCH (m)<-[:DIRECTED]-(d:Person)
    RETURN m.title, rv.rating, r.name, collect(d.name)

    // Counting size of list of nodes with a given relationship
    MATCH (p:Person)
    WITH p, size((p)-[:ACTED_IN]->()) AS movies
    WHERE movies >= 5
    OPTIONAL MATCH (p)-[:DIRECTED]->(m:Movie)
    RETURN p.name, m.title

# CALL: subqueries

    // Subquery
    CALL
    {MATCH (p:Person)-[:REVIEWED]->(m:Movie)
    RETURN  m}
    MATCH (m) WHERE m.released=2000
    RETURN m.title, m.released

################################################
# CONTROLLING RESULTS OBTAINED
################################################

# DISTINCT

    // Rows
    RETURN DISTINCT m.title, m.released

    // Distinct of a list
    RETURN m.title, collect(DISTINCT p.name) AS credits

    // Avoid duplication using WITH
    WITH DISTINCT m
    RETURN m.released, m.title

# ORDER BY

    // DESC
    ORDER BY m.released DESC, m.title

# LIMIT

    // Final results
    ORDER BY m.released DESC LIMIT 10

    // Intermediate results: limit the size of the list to 6 elements at most
    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
    WITH m, p LIMIT 6
    RETURN collect(p.name), m.title

    // Alternatives to limit: count // size
    //COUNT
    MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
    WITH a, count(*) AS numMovies, collect(m.title) AS movies
    WHERE numMovies = 5
    RETURN a.name, numMovies, movies

    //SIZE
    MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
    WITH a, collect(m.title) AS movies
    WHERE size(movies) = 5
    RETURN a.name, movies


################################################
# CREATE NODES
################################################

CREATE (optionalVariable optionalLabels {optionalProperties})

// CREATE EXAMPLE 1 label
    CREATE (:Movie {title: 'Batman Begins'})
// 2 labels
    CREATE (:Movie:Action {title: 'Batman Begins'})

// WIth a variable to be used for the query after the CREATE
    CREATE (m:Movie:Action {title: 'Batman Begins'})
        RETURN m.title

// CREATE MULTIPLE NODES
    CREATE
        (:Person {name: 'Michael Caine', born: 1933}),
        (:Person {name: 'Liam Neeson', born: 1952}),
        (:Person {name: 'Katie Holmes', born: 1978}),
        (:Person {name: 'Benjamin Melniker', born: 1913})

    // Prevent the nodes of the same label to inherit properties, use MERGE

// SET: Adding labels to a node
    SET x:Label1:Label2 //variable x for that node

    MATCH (m:Movie)
    WHERE m.title = 'Batman Begins'
    SET m:Fantasy
    RETURN labels(m)

    // Adding properties to a node
    SET x.propertyName1 = value1    , x.propertyName2 = value2 //overwrites
    SET x = {propertyName1: value1, propertyName2: value2} //overwrites
    SET x += {propertyName1: value1, propertyName2: value2} //adds properties


// REMOVE a Label from a node
    // remove the two labels from the node referenced by the variable x
    REMOVE x:Label1, x:Label2

    MATCH (m:Action)
    REMOVE m:Action, m:Fantasy
    RETURN labels(m)

    // Using SET to remove a property
    SET x.propertyName = null

// EXAMINE PROPERTY KEYS
    CALL db.propertyKeys()

// Retrieving properties of a node
    MATCH (m:Movie)
    WHERE m.title = 'Batman Begins'
    RETURN properties(m)


################################################
# CREATING RELATIONSHIP
################################################

# CREATING RELATIONSHIP

    // Must have a direction
    CREATE (x)-[:REL_TYPE]->(y)
    CREATE (x)<-[:REL_TYPE]-(y)

    // Example of relationship created for existing nodes matching query:
    MATCH (a:Person), (m:Movie)
    WHERE a.name = 'Michael Caine' AND m.title = 'Batman Begins'
    CREATE (a)-[:ACTED_IN]->(m)
    RETURN a, m

    // Relationship WITH PROPERTIES
    MATCH (a:Person), (m:Movie)
    WHERE a.name = 'Katie Holmes' AND m.title = 'Batman Begins'
    CREATE (a)-[rel:ACTED_IN {roles: ['Rachel','Rachel Dawes']}->(m)
    RETURN a.name, rel, m.title

    // For two matching nodes
    MATCH (p1:Person)
    WHERE p1.name = 'Tom Hanks'
    MATCH (p2:Person)
    WHERE p2.name = 'Gary Sinise'
    CREATE (p1)-[:HELPED]->(p2)

    // Set property using CASE WHEN
    MATCH (p:Person)-[rel:ACTED_IN]->(m:Movie)
    WHERE m.title = 'Forrest Gump'
    SET rel.roles =
    CASE p.name
      WHEN 'Tom Hanks' THEN ['Forrest Gump']
      WHEN 'Robin Wright' THEN ['Jenny Curran']
      WHEN 'Gary Sinise' THEN ['Lieutenant Dan Taylor']
    END

# CREATE NODES AND RELATIONSHIPS together
    MATCH (m:Movie)
    WHERE m.title = 'Batman Begins'
    CREATE (a:Person)-[:ACTED_IN]->(m)
    SET a.name = 'Gary Oldman', a.born=1958
    RETURN a, m, p

# SET: add properties to relationship
    SET r.propertyName1 = value1 , r.propertyName2 = value2
    SET r = {propertyName1: value1, propertyName2: value2}
    SET r += {propertyName1: value1, propertyName2: value2}

    // Add properties inline
    MATCH (a:Person), (m:Movie)
    WHERE a.name = 'Christian Bale' AND m.title = 'Batman Begins'
    CREATE (a)-[:ACTED_IN {roles: ['Bruce Wayne', 'Batman']}]->(m)
    RETURN a, m

    // Check if the relationship we are adding, does not exist yet
    MATCH (a:Person),(m:Movie)
    WHERE a.name = 'Christian Bale' AND
          m.title = 'Batman Begins' AND
          NOT exists((a)-[:ACTED_IN]->(m)) //HERE
    CREATE (a)-[rel:ACTED_IN]->(m)
    SET rel.roles = ['Bruce Wayne','Batman']
    RETURN a, rel, m

    // Although the best way to avoid duplication is the MERGE CLAUSE

# REMOVING properties

    // Set property value to NULL

    // REMOVE
    MATCH (a:Person)-[rel:ACTED_IN]->(m:Movie)
    WHERE a.name = 'Christian Bale' AND m.title = 'Batman Begins'
    REMOVE rel.roles
    RETURN a, rel, m

# This creates 3 relationships !!!!!
    MATCH (a:Person), (m:Movie)
    WHERE a.name = 'Tom Jones' AND m.title = 'Life is Wonderful'
    CREATE (a)-[rel:ACTED_IN]->(m)
    CREATE (a)-[rel:ACTED_IN {roles: ['The Villain']}]->(m)
    CREATE (a)-[rel:ACTED_IN {roles: ['The Villain','Joe']}]->(m)

################################################
# DELETING NODES AND RELATIONSHIP
################################################

// DELETE
    MATCH (p:Person)
    WHERE p.name = 'Jane Doe'
    DELETE p

    // Delete two types of relationships at the same type with the OR (|)
    MATCH (a:Person)-[rel:WROTE | DIRECTED]->(m:Movie)
    WHERE a.name = 'Katie Holmes' AND m.title = 'Batman Begins'
    DELETE rel
    RETURN a, m

    // Count the number of relationships different from node to node
    MATCH (a:Person)-[rel]-()
    WHERE a.name = 'Katie Holmes'
    RETURN count(rel) AS `Number of Katie Holmes relationships:`
    // result should be 1

    // To delete a NODE, WE FIRST MUST DELETE THE RELATIONSHIP
    // Use DETACH DELETE
    MATCH (p:Person)
    WHERE p.name = 'Liam Neeson'
    DETACH DELETE  p

################################################
# MERGING DATA
################################################
You can use MERGE to either create new nodes and relationships
or to make changes to existing nodes and relationships.

The MERGE clause is used to find nodes or patterns in the graph.
If the node or pattern is not found, by default, it is created.

# CREATE NODE
    // If there is an existing node with Label
    //and nodeProperties found in the graph, no node is created
    MERGE (variable:Label{nodeProperties})
    RETURN variable



# Create relationships
    MATCH (p {name: 'Michael Caine'}),(m:Movie {title:'Batman Begins'})
    MERGE (p)-[:ACTED_IN]->(m) //no need to specify direction
    RETURN p,m

    // It is expensive, don't do that unless you really need the relation to be unique

    // Avoid a relationship to be duplicated
    MATCH (p:Person), (m:Movie)
    WHERE m.title = 'Batman Begins' AND p.name ENDS WITH 'Caine'
    MERGE (p)-[:ACTED_IN]->(m)
    RETURN p, m

# ON CREATE
You can use the MERGE clause, along with ON CREATE to assign specific values
to a node being created as a result of an attempt to merge.
    MERGE (a:Person {name: 'Sir Michael Caine'}) //if this node does not exist, creates it
    ON CREATE SET a.birthPlace = 'London', // and set this properties, otherwise, keep the
                  a.born = 1934 //existing properties
    RETURN a

# ON MATCH: specify update when merging
    MERGE (a:Person {name: 'Sir Michael Caine'})
    ON CREATE SET a.born = 1934,
                  a.birthPlace = 'UK'
    ON MATCH SET a.birthPlace = 'UK'

// MERGE tries to find a full pattern and if it doesn’t find it,
it creates that full pattern. That’s why in most cases you should first
MERGE your nodes and then your relationship afterwards.

################################################
# CONSTRAINTS
################################################

// Retrieve all constraints
CALL db.constraints()

// Drop constraing
DROP CONSTRAINT ConstraintName

// MERGE does use locks
// ENSURE ALL NODES AND RELATIONSHIPS HAVE A CERTAIN PROPERTY
// Ensure a set of property values for nodes of the same type have UNIQUE VALUE
 (aka PRIMARY KEY in SQL)

 // Uniqueness constraint
 // Existence constraint: ensure certain properties on creation / modification

// UNIQUE PROPERTY: only for nodes


    // Create it before even creating nodes Movies with the property m.title
    CREATE CONSTRAINT UniqueMovieTitleConstraint ON (m:Movie) ASSERT m.title IS UNIQUE

// ENSURING that a PROPERTY EXIST (EXISTENCE): for both nodes and relationship

    // Existence constraint on NODE: must be created before creating nodes
    CREATE CONSTRAINT ExistsMovieTagline ON (m:Movie) ASSERT exists(m.tagline)

    // Existence constraint on RELATIONSHIP
    CREATE CONSTRAINT ExistsREVIEWEDRating
       ON ()-[rel:REVIEWED]-() ASSERT exists(rel.rating)

// Unique Name of two properties
    CREATE CONSTRAINT UniqueNameBornConstraint
       ON (p:Person) ASSERT (p.name, p.born) IS NODE KEY


################################################
# INDEX
################################################

// A uniqueness constraint is also an index where
// the default implementation is a b-tree structure

// Single property indexes apply when performing operations like:
    - = (also for composite indexes)
    - >, >=, <, ...
    - IN (also for composite indexes)
    - STARTS WITH, ENDS WITH, CONTAINS
    - exists()
    - distance()
    - point()

// Neo4j recommends that for large graphs, indexes are created
// after the data has been loaded into the graph

// Single property index on a property of NODE
    CREATE INDEX MovieReleased FOR (m:Movie) ON (m.released)

// Composite INDEX: used to retrieve faster multiple properties
// without imposing uniqueness (if so, you should use a CONSTRAINT)
    CREATE INDEX MovieReleasedVideoFormat FOR (m:Movie) ON (m.released, m.videoFormat)

// FULL-TEXT SCHEMA INDEX
    // Applied to:
        - Nodes / Relationship properties
        - Multiple properties
        - Multiple types of nodes (labels)
        - Multiple types of relationships
    //underlying implementation of a full-text schema index is Lucene

    CALL db.index.fulltext.createNodeIndex(
      'MovieTitlePersonName',['Movie', 'Person'], ['title', 'name'])

    // See the index
    CALL db.indexes() //(type FULLTEXT)

    // Schema for relationships
    db.indexfulltext.createRelationshipIndex()

    // Application (using YIELD)
    CALL db.index.fulltext.queryNodes(
         'MovieTitlePersonName', 'Jerry') YIELD node
    RETURN node
        // YIELD: return values from the procedure
        //  return all nodes that are found in the graph that have
        //  either a title property or name property containing the string, Jerry

    // Application 2: using an OR
    CALL db.index.fulltext.queryNodes('MovieTaglineFTIndex', 'real OR world')
        YIELD node
    RETURN node.title, node.tagline

    // It calculates a "Hit Score" (closeness of the values to the query string)
    CALL db.index.fulltext.queryNodes(
         'MovieTitlePersonName', 'Matrix') YIELD node, score
    RETURN node.title, score

    // DROP INDEX
    DROP INDEX MovieReleasedVideoFormat

    // DROP a FULL TEXT schem index
    CALL db.index.fulltext.drop('MovieTitlePersonName')

################################################
# BEST PRACTICES
################################################

# PARAMETERS ($)
    // Set a parameter
    :param actorName => 'Tom Hanks'

    // Call a parameter
    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
    WHERE p.name = $actorName
    RETURN m.released, m.title ORDER BY m.released DESC

    // Multiple parameters
    :params {actorName: 'Tom Cruise', movieName: 'Top Gun'}

    // Clear all parameters
    :params {}

    // View all parameters
    :params

# Analyze QUERIES

    // EXPLAIN
    Provides estimates of the graph engine processing
    that will occur, but does not execute the Cypher statement.

        // Application: explain a query plan:
        EXPLAIN MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
            WHERE p.name = $actorName AND
                  m.released <  $year
            RETURN p.name, m.title, m.released

    //PROFILE
    Provides real profiling information for what has occurred in the graph
    engine during the query and executes!!! the Cypher statement.

    PROFILE MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
            WHERE p.name = $actorName AND
                  m.released <  $year
            RETURN p.name, m.title, m.released

    // :queries : status of the query -> calls dbms.listQueries()


################################################
# IMPORTING DATA
################################################

##################
# LOAD CSV
##################

// FIELDTERMINATOR
    AS line FIELDTERMINATOR ';;'

// Inspect first data
    LOAD CSV WITH HEADERS
    FROM 'https://data.neo4j.com/v4.0-intro-neo4j/people.csv'
    AS line
    RETURN line LIMIT 10

// Location of CSV
    Manage > Open Folder > Import

    // Import file in that location
    LOAD CSV WITH HEADERS
    FROM 'file:///people.csv'
    AS line
    RETURN line LIMIT 10

// Data by default is interpreted as STRING: CONVERT DATA TYPES

    LOAD CSV WITH HEADERS
    FROM 'file:///movies1.csv'
    AS line
    RETURN toFloat(line.avgVote), line.genres, toInteger(line.movieId),
           line.title, toInteger(line.releaseYear) LIMIT 10

// Transform lists: SPLIT and COALESCE
    // If some fields may have no values, we want an empty list to be created
    // hence, we will need to use the COALESCE function with the split

    LOAD CSV WITH HEADERS
    FROM 'file:///movies1.csv'
    AS line
    RETURN toFloat(line.avgVote), split(coalesce(line.genres,""), ":"),
           toInteger(line.movieId), line.title, toInteger(line.releaseYear)
           LIMIT 10

# CREATING A NEW DATABASE: STEPS

    // Create the constraints
    CREATE CONSTRAINT UniqueMovieIdConstraint ON (m:Movie) ASSERT m.id IS UNIQUE;
    CREATE CONSTRAINT UniquePersonIdConstraint ON (p:Person) ASSERT p.id IS UNIQUE

    //If your load process uses MERGE, rather than CREATE to create nodes,
    // the load will be VERY slow if constraints are not defined first

    // COUNT: Size of data to be loaded
    LOAD CSV WITH HEADERS
    FROM 'file:///people.csv'
    AS line
    RETURN count(line)

    // Larger than 100k
        :auto USING PERIODIC COMMIT LOAD CSV: commit its transactions every 1000 rows
        // but you won't be able to execute EAGER OPERATORS collect, count, order by nor distinct
        // if you query has EAGER OPEARTORS, then use APOC to import data

    // Use of PERIODIC COMMIT: IMPORTING NODES
    :auto USING PERIODIC COMMIT 500
    LOAD CSV WITH HEADERS FROM
      'https://data.neo4j.com/v4.0-intro-neo4j/movies1.csv' as row
    MERGE (m:Movie {id:toInteger(row.movieId)})
        ON CREATE SET
              m.title = row.title,
              m.avgVote = toFloat(row.avgVote),
              m.releaseYear = toInteger(row.releaseYear),
              m.genres = split(row.genres,":")

    // IMPORT RELATIONSHIPS
    LOAD CSV WITH HEADERS FROM
        'https://data.neo4j.com/v4.0-intro-neo4j/directors.csv' AS row
    MATCH (movie:Movie {id:toInteger(row.movieId)})
    MATCH (person:Person {id: toInteger(row.personId)})
    MERGE (person)-[:DIRECTED]->(movie)
    ON CREATE SET person:Director

    // Now create other indices (not for the IDs but for other properties which are NOT unique)
    // Do this only after ALL data has been imported
    CREATE INDEX MovieTitleIndex ON (m:Movie) FOR (m.title);
    CREATE INDEX PersonNameIndex ON (p:Person) FOR (pname)


##################
# APOC
##################

With APOC, you can load large datasets that will fail
if using LOAD CSV or even :auto USING PERIODIC COMMIT LOAD CSV

# Install it for you Project in the Plugins section

# Delete everything
    // Delete all constraints and indexes
    CALL apoc.schema.assert({},{},true);
    // Delete all nodes and relationships
    CALL apoc.periodic.iterate(
      'MATCH (n) RETURN n',
      'DETACH DELETE n',
      { batchSize:500 }
    )

# For NON-NORMALIZED DATA, use a first WITH to load movies
# and a collection to store properties for Person nodes
# then with a second WITH *, do an UNWIND to do a creation of the nodes
with the properties in the the previous created collection

    CREATE CONSTRAINT UniqueMovieIdConstraint ON (m:Movie) ASSERT m.id IS UNIQUE;
    CREATE CONSTRAINT UniquePersonIdConstraint ON (p:Person) ASSERT p.id IS UNIQUE;

    // import the people and movie data (partial; no relationships)
    LOAD CSV WITH HEADERS FROM
         'https://data.neo4j.com/v4.0-intro-neo4j/movies2.csv' AS row
    WITH row.movieId as movieId, row.title AS title, row.genres AS genres,
         toInteger(row.releaseYear) AS releaseYear, toFloat(row.avgVote) AS avgVote,
         collect({id: row.personId, name:row.name, born: toInteger(row.birthYear),
            died: toInteger(row.deathYear),personType: row.personType,
            roles: split(coalesce(row.characters,""),':')}) AS personData
    MERGE (m:Movie {id:movieId})
       ON CREATE SET m.title=title, m.avgVote=avgVote,
          m.releaseYear=releaseYear, m.genres=split(genres,":")
    WITH *
    UNWIND personData AS person
    MERGE (p:Person {id: person.id})
       ON CREATE SET p.name = person.name, p.born = person.born, p.died = person.died

// The next step will be to add the relationships

// APOC Conditional processing: DO WHEN

    LOAD CSV WITH HEADERS FROM
         'https://data.neo4j.com/v4.0-intro-neo4j/movies2.csv' AS row
    WITH row.movieId as movieId, row.title AS title, row.genres AS genres,
         toInteger(row.releaseYear) AS releaseYear, toFloat(row.avgVote) AS avgVote,
         collect({id: row.personId, name:row.name, born: toInteger(row.birthYear),
                died: toInteger(row.deathYear),personType: row.personType,
                roles: split(coalesce(row.characters,""),':')}) AS people
    MERGE (m:Movie {id:movieId})
       ON CREATE SET m.title=title, m.avgVote=avgVote,
          m.releaseYear=releaseYear, m.genres=split(genres,":")
    WITH *
    UNWIND people AS person
    MERGE (p:Person {id: person.id})
       ON CREATE SET p.name = person.name, p.born = person.born, p.died = person.died
    // continue processing and use the personType to create the relationships
    WITH  m, person, p
    CALL apoc.do.when(person.personType = 'ACTOR',
         "MERGE (p)-[:ACTED_IN {roles: person.roles}]->(m)
                    ON CREATE SET p:Actor",
         "MERGE (p)-[:DIRECTED]->(m)
             ON CREATE SET p:Director",
         {m:m, p:p, person:person}) YIELD value
    RETURN count(*)  // cannot end query with this type of APOC call


// Load large datasets: apoc.periodic.iterate()

    CALL apoc.periodic.iterate(
    "CALL apoc.load.csv('https://data.neo4j.com/v4.0-intro-neo4j/movies2.csv' )
     YIELD map AS row RETURN row",
     "WITH row.movieId as movieId, row.title AS title, row.genres AS genres,
          toInteger(row.releaseYear) AS releaseYear, toFloat(row.avgVote) AS avgVote,
          collect({id: row.personId, name:row.name, born: toInteger(row.birthYear),
          died: toInteger(row.deathYear),personType: row.personType,
          roles: split(coalesce(row.characters,''),':')}) AS people
     MERGE (m:Movie {id:movieId})
        ON CREATE SET m.title=title, m.avgVote=avgVote,
           m.releaseYear=releaseYear, m.genres=split(genres,':')
     WITH *
     UNWIND people AS person
     MERGE (p:Person {id: person.id})
       ON CREATE SET p.name = person.name, p.born = person.born, p.died = person.died
     WITH  m, person, p
     CALL apoc.do.when(person.personType = 'ACTOR',
          'MERGE (p)-[:ACTED_IN {roles: person.roles}]->(m)
                     ON CREATE SET p:Actor',
          'MERGE (p)-[:DIRECTED]->(m)
              ON CREATE SET p:Director',
          {m:m, p:p, person:person}) YIELD value AS value
           RETURN count(*)  ",
    {batchSize: 500}
    )


##################
# neo4j-admin tool
##################

../bin/neo4j-admin import
        --database crimes
        --nodes crimes_header.csv,crimes.csv
        --nodes beats.csv
        --nodes=PrimaryType=primaryTypes.csv
        --relationships crimesBeats.csv
        --relationships=PRIMARY_TYPE=crimesPrimaryTypes.csv
        --trim-strings=true > import.out


##################################
# Python Connection
##################################

uri = "bolt://localhost:7687"
driver = GraphDatabase.driver(uri, auth=("neo4j", "p4ssw0rd"))

def print_names(tx):
    result = tx.run("MATCH (a:Person) RETURN a.name")
    for record in result:
        print(record["a.name"])

with driver.session() as session:
    session.read_transaction(print_names)

##################################
# ETL TOOL
##################################
